/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package body;

import head.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Vector;

/**
 *
 * @author boginni
 */
public class CopyController extends javax.swing.JFrame implements
        CopyListener,
        BackgroundInputListener,
        ExportListener,
        FloatingGui2.ChangeRowListener{

    /**
     * Creates new form CopyController
     */
    public CopyController() {
        ClipBoard.addCopyListener(this);
        BackgroundListener.addListener(this);
        FloatingGui2.addRowListener(this);
        Formatador.addExportListener(this);
        initComponents();

        setCurrentIndex(comboCurAction.getSelectedIndex());
        try {
            bot = new Robot();
        } catch (Exception e) {
            System.exit(0);
        }
        for (int i = 0; i < 4; i++){
            config[i] = new ArrayList();
        }

        setVisible(true);

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnLast = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblCurStep = new javax.swing.JLabel();
        btnPause = new javax.swing.JButton();
        btnWindow = new javax.swing.JButton();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        comboCurAction = new javax.swing.JComboBox<>();
        progressCurrent = new javax.swing.JProgressBar();
        progressGeral = new javax.swing.JProgressBar();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel progressLocal = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnFix = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(1, 2));

        btnLast.setText("<");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel1.add(btnLast);

        btnNext.setText(">");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel1.add(btnNext);

        lblCurStep.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCurStep.setText("0");

        btnPause.setText("Pausar");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnWindow.setText("Mostrar Titulo");
        btnWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWindowActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Config");

        comboCurAction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCurAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCurActionActionPerformed(evt);
            }
        });
        comboCurAction.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                comboCurActionPropertyChange(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Geral");

        progressLocal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progressLocal.setText("Atual");

        btnFix.setText("Fixar");
        btnFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFixActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Default");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressGeral, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(progressCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(comboCurAction, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCurStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnPause, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                    .addComponent(btnFix, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressLocal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressGeral, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressLocal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboCurAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblCurStep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPause)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnWindow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFix)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        setCurrentStep(currentStep-1);
    }//GEN-LAST:event_btnLastActionPerformed
    boolean onPause = false;
    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        // TODO add your handling code here:
        btnPause.setText((onPause)?"Pausar":"Retomar");
        onPause = !onPause;


    }//GEN-LAST:event_btnPauseActionPerformed
    boolean btnSwitchTitleBool;
    private void btnWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWindowActionPerformed
        // TODO add your handling code here:
        dispose();
        setUndecorated(btnSwitchTitleBool);
        setVisible(true);
        btnWindow.setText(!btnSwitchTitleBool? "Remover Titulo": "Mostrar Titulo");
        btnSwitchTitleBool = !btnSwitchTitleBool;
    }//GEN-LAST:event_btnWindowActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        setCurrentStep(currentStep+1);
    }//GEN-LAST:event_btnNextActionPerformed

    private void comboCurActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCurActionActionPerformed
        // TODO add your handling code here:
        setCurrentIndex(comboCurAction.getSelectedIndex());
    }//GEN-LAST:event_comboCurActionActionPerformed

    private void comboCurActionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_comboCurActionPropertyChange
        // TODO add your handling code here:

    }//GEN-LAST:event_comboCurActionPropertyChange
    boolean btnFixbool = false;
    private void btnFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFixActionPerformed
        // TODO add your handling code here:
        
        btnFix.setText((btnFixbool)?"Fixar":"Desfixar");
        btnFixbool = !btnFixbool;
        setAlwaysOnTop(btnFixbool);

    }//GEN-LAST:event_btnFixActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        defaultRow = jComboBox2.getSelectedIndex();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CopyController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CopyController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CopyController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CopyController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CopyController().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFix;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnWindow;
    private javax.swing.JComboBox<String> comboCurAction;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblCurStep;
    private javax.swing.JProgressBar progressCurrent;
    private javax.swing.JProgressBar progressGeral;
    // End of variables declaration//GEN-END:variables

    Robot bot;

    public int getCurrentInteract(){
        return config[currentIndex].get(currentStep);
    }

    int currentStep = 0, currentIndex = 0;
    boolean onAction = false;
    private void setCurrentIndex(int selectedIndex) {
        currentIndex = selectedIndex;
        setCurrentStep(0);
    }

    boolean isValidStep(int step){
        return !(step >= config[currentIndex].size() || step < 0);
    }

    void setCurrentStep(int newStep){
        if(config[currentIndex] == null)
            return;
        currentStep = newStep;
        lblCurStep.setText(String.valueOf(currentStep));
    }

    public void setConfig(ArrayList<DefaultTableModel> copyTables) {
        JTable getter;
        for (int i = 0; i < 4; i++){
            config[i].clear();
            DefaultTableModel dtm = copyTables.get(i);

            Vector v = dtm.getDataVector();

            for (int j = 0; j < dtm.getRowCount(); j++){
                Vector v2 = (Vector) v.get(j);
                config[i].add(Integer.valueOf(v2.get(1).toString()));
            }

        }
    }

    ArrayList<Integer> config[] = new ArrayList[4];

    FloatingGui2 tableInterface;
    Formatador formatter;

    public void setTable(FloatingGui2 curGui, Formatador formatter) {
        tableInterface = curGui;
        this.formatter = formatter;
    }

    @Override
    public void keyEvent(boolean b, int i) {
        if(tableInterface == null){
            return;
        }
        if(!b || currentIndex != 3 || onAction || onPause){
            return;
        }
        onAction = true;

        if(i == 57 && isValidStep(currentStep)){
            ClipBoard.setClipBoard(tableInterface.copyCell(getCurrentInteract()), true);
            bot.keyPress(KeyEvent.VK_BACK_SPACE);
            bot.keyRelease(KeyEvent.VK_BACK_SPACE);
            bot.keyPress(KeyEvent.VK_CONTROL);
            bot.keyPress(KeyEvent.VK_V);
            bot.keyRelease(KeyEvent.VK_V);
            bot.keyRelease(KeyEvent.VK_CONTROL);

            setCurrentStep(currentStep + 1);
        }

        onAction = false;
    }

    @Override
    public void copyAction(String curClip, boolean b) {
        if(!b || onPause){
            return;
        }

        if(currentIndex==3){
            return;
        }

        if(tableInterface == null){
            return;
        }

        if(isValidStep(currentStep)){
            if(getCurrentInteract() == -1){
                formatter.clear();
                formatter.setText(curClip);
                formatter.requestFocus();
                if(!onPause)
                    btnPauseActionPerformed(null);
                setAlwaysOnTop(true);
                setAlwaysOnTop(false);
            } else {
                tableInterface.pasteCell(getCurrentInteract(), curClip);
                setCurrentStep(currentStep+1);
            }

        }

    }


    int defaultRow = 0;
    @Override
    public void onRowChange(int newRow) {
        setCurrentIndex(defaultRow);
        comboCurAction.setSelectedIndex(defaultRow);
    }

    @Override
    public void onExport(String[] vars, int[] targets) {
        for(int i = 0; i < vars.length; i++){
            tableInterface.pasteCell(targets[i], vars[i]);
            new FloatingGui2.ColorFade(tableInterface.getCell(targets[i]), Color.red, new Color(255, 220, 220), 2500);
        }
    }
}
