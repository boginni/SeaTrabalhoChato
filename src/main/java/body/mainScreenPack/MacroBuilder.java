/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package body.mainScreenPack;

import body.mainScreenPack.AutoActions.MouseClick;
import body.mainScreenPack.AutoActions.KeyType;
import body.mainScreenPack.AutoActions.AutomatedAction;
import body.mainScreenPack.AutoActions.CopyAction;
import body.mainScreenPack.AutoActions.PasteAction;
import head.BackgroundListener;
import head.interfaces.GlobalKeyboardListener;
import head.interfaces.GlobalMouseListener;
import java.awt.Color;
import java.awt.Robot;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import body.mainScreenPack.AutoActions.Properities.PanProp;

/**
 *
 * @author boginni
 */
public class MacroBuilder extends javax.swing.JPanel implements GlobalKeyboardListener, GlobalMouseListener {
    PanProp panProp;
    /**
     * Creates new form NewJPanel
     */
    public MacroBuilder() {
        initComponents();
        modelPlayList = (DefaultTableModel) tbPlayList.getModel();
        BackgroundListener.addKeyboardListener(this);
        BackgroundListener.addMouseListener(this);
        try {
            b = new Robot();
        } catch (Exception e) {
        }
        panProp = PanProp.getNullPanel();
        pantbMacro.addTab("Celula", panProp);
    }

    DefaultTableModel modelPlayList;
    boolean isRecording = false;
    boolean isRunning = false;
    long lastClickTime = -1;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbPlayList = new javax.swing.JTable();
        pantbMacro = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        btnRecordClick = new javax.swing.JCheckBox();
        cmbRecordType = new javax.swing.JComboBox<>();
        btnExecut = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnRecord = new javax.swing.JButton();
        panCells = new javax.swing.JPanel();
        brnRemoveRow = new javax.swing.JButton();
        btnMoveUp = new javax.swing.JButton();
        btnMoveDpwn = new javax.swing.JButton();
        btnAddCopy = new javax.swing.JButton();
        btnAddPaste = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        tbPlayList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Delay", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbPlayList.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(tbPlayList);
        tbPlayList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbPlayList.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            boolean b = false;
            public void valueChanged(ListSelectionEvent event) {
                b = !b;
                if(b){
                    MacroRowSelectEvent();
                }

            }
        });

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWidths = new int[] {0};
        jPanel2Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel2.setLayout(jPanel2Layout);

        btnRecordClick.setText("Only Type or Clicks");
        btnRecordClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordClickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(btnRecordClick, gridBagConstraints);

        cmbRecordType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ambos", "Mouse", "Teclado" }));
        cmbRecordType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRecordTypeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(cmbRecordType, gridBagConstraints);

        btnExecut.setText("Executar");
        btnExecut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(btnExecut, gridBagConstraints);

        btnClear.setText("Limpar");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(btnClear, gridBagConstraints);

        btnRecord.setText("Gravar");
        btnRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel2.add(btnRecord, gridBagConstraints);

        pantbMacro.addTab("Controle", jPanel2);

        java.awt.GridBagLayout panCellsLayout = new java.awt.GridBagLayout();
        panCellsLayout.columnWidths = new int[] {0};
        panCellsLayout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0};
        panCells.setLayout(panCellsLayout);

        brnRemoveRow.setText("RemoveRow");
        brnRemoveRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnRemoveRowActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        panCells.add(brnRemoveRow, gridBagConstraints);

        btnMoveUp.setText("Mover Para Cima");
        btnMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveUpActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        panCells.add(btnMoveUp, gridBagConstraints);

        btnMoveDpwn.setText("Mover Para Baixo");
        btnMoveDpwn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveDpwnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        panCells.add(btnMoveDpwn, gridBagConstraints);

        btnAddCopy.setText("AddCopy");
        btnAddCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCopyActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        panCells.add(btnAddCopy, gridBagConstraints);

        btnAddPaste.setText("AddPaste");
        btnAddPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPasteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 0.1;
        panCells.add(btnAddPaste, gridBagConstraints);

        pantbMacro.addTab("Linhas", panCells);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pantbMacro, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(pantbMacro, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Macro"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Nova");

        jButton2.setText("Remover");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    Robot b;

    private void btnExecutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutActionPerformed

        new Thread() {
            @Override
            public void run() {
                isRunning = true;
                btnExecut.setEnabled(false);
                btnClear.setEnabled(false);
                btnRecord.setEnabled(false);
                int rowCount = modelPlayList.getRowCount();
                for (int i = 0; i < rowCount; i++) {
                    
                    int delay;
                    delay = (int) modelPlayList.getValueAt(i, 1);
                    AutomatedAction action = (AutomatedAction) modelPlayList.getValueAt(i, 2);
                    System.out.print("Wating for " + action);
                    try {
                        this.sleep(delay);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MacroBuilder.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println(" -> Complete");
                    action.start(b);
                    
                }

                btnExecut.setEnabled(true);
                btnClear.setEnabled(true);
                btnRecord.setEnabled(true);
                isRunning = false;
            }

        }.start();

    }//GEN-LAST:event_btnExecutActionPerformed


    private void btnRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordActionPerformed
        if (isRecording) {
            btnRecord.setText("Gravar");
            btnRecord.setBackground(Color.green);
            isRecording = false;
        } else {

            lastClickTime = -1;
            btnRecord.setText("Starting...");
            btnRecord.setBackground(Color.gray);

            new Thread(){
                @Override
                public void run() {
                    try {
                        sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    btnRecord.setText("Parar");
                    btnRecord.setBackground(Color.red);
                    isRecording = true;
                    long curTime = System.nanoTime() / 1_000_000;
                    lastClickTime = curTime;
                }
            }.start();
        }

    }//GEN-LAST:event_btnRecordActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        int rowCount = modelPlayList.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            modelPlayList.removeRow(0);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void brnRemoveRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnRemoveRowActionPerformed
        // TODO add your handling code here:
        
        int curRow = tbPlayList.getSelectedRow();
        if(curRow == -1){
            return;
        }
        modelPlayList.removeRow(curRow);
        
    }//GEN-LAST:event_brnRemoveRowActionPerformed

    private void btnAddPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPasteActionPerformed
        // TODO add your handling code here:
        int delay = 0;
        AutomatedAction action;
        action = new PasteAction();
        Object value[] = {
            modelPlayList.getRowCount(),
            delay,
            action
        };
        modelPlayList.addRow(value);

    }//GEN-LAST:event_btnAddPasteActionPerformed

    private void btnAddCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCopyActionPerformed
        // TODO add your handling code here:
        int delay = 0;
        AutomatedAction action;
        action = new CopyAction();
        Object value[] = {
            modelPlayList.getRowCount(),
            delay,
            action
        };
        modelPlayList.addRow(value);

    }//GEN-LAST:event_btnAddCopyActionPerformed

    private void btnRecordClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordClickActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnRecordClickActionPerformed

    private void btnMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveUpActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnMoveUpActionPerformed

    private void btnMoveDpwnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveDpwnActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btnMoveDpwnActionPerformed

    private void cmbRecordTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRecordTypeActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbRecordTypeActionPerformed
    
    
    void MacroRowSelectEvent(){
        
        int row = tbPlayList.getSelectedRow();
        
        if(row < 0){
           return;
        }
        
        AutomatedAction action = (AutomatedAction) modelPlayList.getValueAt(row, 2);
        
        if(action.getPanel().getClass().equals(panProp.getClass())){
            panProp.setCurrentAction(action);
        } else {
            pantbMacro.removeTabAt(2);
            panProp = action.getPanel();
            panProp.setCurrentAction(action);
            pantbMacro.addTab("Celula", panProp);
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnRemoveRow;
    private javax.swing.JButton btnAddCopy;
    private javax.swing.JButton btnAddPaste;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExecut;
    private javax.swing.JButton btnMoveDpwn;
    private javax.swing.JButton btnMoveUp;
    private javax.swing.JButton btnRecord;
    private javax.swing.JCheckBox btnRecordClick;
    private javax.swing.JComboBox<String> cmbRecordType;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel panCells;
    private javax.swing.JTabbedPane pantbMacro;
    private javax.swing.JTable tbPlayList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyEvent(boolean b, int i) {
        if(isRunning){
            return;
        }
        
        if(isRecording && cmbRecordType.getSelectedIndex() != 1){
            int delay = getDelay();
            AutomatedAction action;
            int ac = b?0:1;
            action = new KeyType(i, ac, 0);
            
            Object value[] = {
                modelPlayList.getRowCount(),
                delay,
                action
            };
            
            modelPlayList.addRow(value);
        }
    }
    MouseClick last;
    @Override
    public void mouseClick(boolean b, int i, int x, int y) {
      
        if (isRunning) {
            return;
        }

        if (isRecording && cmbRecordType.getSelectedIndex() != 2) {
            int delay = getDelay();
            AutomatedAction action;
            if(btnRecordClick.isSelected()){
                
                if(b){
                    last = new MouseClick(x, y, i, 2, 0);
                    return;
                } else {
                    if(last == null || i != last.getButton())
                        return;
                    last.setDelay(delay);
                    last.setP2(x,y);
                    action = last;
                }
            } else {
                action = new MouseClick(x, y, i, b?0:1, 0);
            }
            
            Object value[] = {
                modelPlayList.getRowCount(),
                delay,
                action
            };
            
            modelPlayList.addRow(value);
        }

    }

    @Override
    public void mouseMove(int x, int y) {
        
    }

    public int getDelay() {
        int delay;
        long curTime = System.nanoTime() / 1_000_000;

        delay = (int) (curTime - lastClickTime);
        if (lastClickTime == -1) {
            delay = 0;
        }
        lastClickTime = curTime;
        return delay;
    }
}
